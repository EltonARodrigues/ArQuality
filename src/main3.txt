/********************************************
  Projeto TCC
  Name: Projeto TCC
  Purpose: Medidor de poluição.

  @author EltonARodrigues
  @version 0.9  14/06/18
**********************************************/


#include <SoftwareSerial.h>
#include "MQ135.h"
#include "DHT.h"
#include "Streaming.h"


#define PIN_MICS2714 A1
#define DHTPIN 5
#define PIN_MQ135 A4

#define DHTTYPE DHT11
#define CO2_ATMOSPHERE 410.0
#define co2Zero     55                                   //calibrated CO2 0 level

// Comment to show in Serial Monitor 
//#define BLUETOOTH_ON
#define BLUETOOTH_NAME "Dobrardor de AR"
#define BLUETOOTH_PASSWORD 0666

SoftwareSerial bluetooth(11, 10);                        // Emulate port (Rx, Tx) to use with hc-06

DHT dht(DHTPIN, DHTTYPE); 




float Vout = 0;                                          //output voltage
float Rs = 0;                                            //Sensor Resistance
float ppbNO2 = 0;                                        //ppb NO2
float ppmNO2 =0;                                         //ppm NO2

float CO2_Read(){
  
  ////CO2 variables 
  int co2now[10];                                          //int array for co2 readings
  int co2raw = 0;                                          //int for raw value of co2
  int co2comp = 0;                                         //int for compensated co2 
  int co2ppm = 0;                                          //int for calculated ppm
  int zzz = 0;                                             //int for averaging

  for (int x = 0;x<10;x++){                              //samplpe co2 10x over 2 seconds
    co2now[x]=analogRead(PIN_MQ135);
    delay(200);
  }

  for (int x = 0;x<10;x++){                              //add samples together
    zzz=zzz + co2now[x];
  }
  co2raw = zzz/10;                                       //divide samples by 10
  co2comp = co2raw - co2Zero;                            //get compensated value
  co2ppm = map(co2comp,0,1023,CO2_ATMOSPHERE,5000);      //map value for atmospheric levels

  return co2ppm;
}

float NO2_Read(){

  Vout = analogRead(PIN_MICS2714)/409.2;                 // take reading and convert ADC value to voltage
  Rs = 22000/((5/Vout) - 1);                             // find sensor resistance from Vout, using 5V input & 22kOhm load resistor
  ppbNO2 = (.000008*Rs - .0194)*1000;                    //convert Rs to ppb concentration NO2 (equation derived from data found on http://airpi.es/sensors.php
  //ppmNO2 = ppmNO2/1000; //ppb to ppm

  return ppbNO2;

}

void setup()
{
  Serial.begin(9600);
  pinMode(PIN_MQ135,INPUT);                     //MQ135 analog feed set for input
#ifdef BLUETOOTH_ON
  // bluetooh set config for name and password
  bluetooth.begin(9600); 
  
  bluetooth.print("AT");
  delay(1000);
  bluetooth.print("AT+NAME");
  bluetooth.print("Sensor do AR");
  bluetooth.print("\r\n");
  delay(1000);
  bluetooth.print("AT+PIN");
  bluetooth.print(BLUETOOTH_PASSWORD);
  bluetooth.print("\r\n");
  delay(1000);
#endif
dht.begin();
}

void loop()
{
  // Get temp and humidity values with DHT11
  float temperature= dht.readTemperature() + 6;
  float humidity= dht.readHumidity() - 31;   
     
#ifdef BLUETOOTH_ON
  bluetooth << temperature << ", " << humidity << ", " << NO2_Read() << ", " << CO2_Read() <<"\n";

#else
   Serial << temperature << ", " << humidity << ", " << NO2_Read() << ", " << CO2_Read() <<"\n";

  

#endif  

  delay(1000);
}

